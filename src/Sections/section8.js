// A Map is a key-value collection introduced in ES6

// map is a collection which basically maps key vbalue pairs
export const creatingAdding = () => {
  const cardAce = {
    name: 'Ace of Spades',
  };
  const cardKing = {
    name: 'King of Clubs',
  };
  const deck = new Map();
  deck.set('as', cardAce);
  deck.set('kc', cardKing);
  console.log('deck: ', deck);
  console.log('deck.size: ', deck.size);

  deck.set('as', cardAce); // for 2nd time update the value with key 'as'
  console.log('deck.set: ', deck.size); // get deck size

  deck.delete('as'); // delete value in deck with 'as' key
  console.log('deck.delete: ', deck);
  console.log(deck.get('as'));

  deck.clear();
  console.log('deck.clear: ', deck);
};

export const loopingThroughMaps = () => {
  const cardAce = {
    name: 'Ace of Spades',
  };
  const cardKing = {
    name: 'King of Clubs',
  };
  const deck = new Map();
  deck.set('as', cardAce);
  deck.set('kc', cardKing);

  // iteration loop through keys
  console.log('deck.keys():');
  for (const key of deck.keys()) {
    console.log('key: ', key);
  }

  // iteration loop through values
  console.log('deck.values():');
  for (const value of deck.values()) {
    console.log('value: ', value);
  }

  // iteration loop through entries
  console.log('deck.entries():');
  for (const entry of deck.entries()) {
    console.log('entry: ', entry);
  }

  // iteration loop through deck as a whole
  console.log('entry of deck:');
  for (const entry of deck) {
    console.log('entry: ', entry);
  }
};

// WRAP UP MAPS AND SETS

// map object
// pair of key and value being stored through,
// Set Method to set or overwrite | deck.set('key', value);
// Get method to get value | deck.get('key');
// Delete method to delete single item by key | deck.delete('key');
// Clear method to clear all the content | deck.clear();

// Loop to Map all of each value
// By key | for (const key of deck.keys())
// By value | for (const value of deck.values())
// By entry v1 |  for (const entry of deck.entries())
// or explicitly  | for (const entry of deck)

// Maps allow you to store data in different way by not using object
// Maps with a key

export const weakMap = () => {
  const cardAce = {
    name: 'Ace of Spades',
  };
  const cardKing = {
    name: 'King of Clubs',
  };

  const key1 = { a: 1 };
  const key2 = { b: 2 };
  // in weakMap the key has to be an object

  const deck = new WeakMap();
  deck.set(key1, cardAce);
  deck.set(key2, cardKing);

  console.log('deck.get(key1)', deck.get(key1));
};

// WEAKMAP
// ALters your map
// Looping is not possible
// It is not enumerable (you can’t loop through it)
// has no size property
// WeakMaps hold weak references to the stored values
// if some values aren’t used anymore, they can get garbage-collected and
// will be released from the map

// SETS
// A Set is a collection which only holds values
// Set will only old unique values. That means, no value can appear
// more often than once in a Set.
// set is juat a collection of values without keys
// stores unique values
//  Stores value in an array kind while making sure that values aremunique

export const creationAddingItems = () => {
  const set = new Set([1, 1, 1]);
  set.add(2);

  console.log('set', set);

  console.log('entry of set.entries(): ');
  for (const entry of set.entries()) {
    console.log('entry: ', entry);
  }
  // output: [key, value]
  // key is auto generated by position

  console.log('key of set.keys(): ');
  for (const key of set.keys()) {
    console.log('key: ', key);
  }

  console.log('value of set.values(): ');
  for (const value of set.values()) {
    console.log('value: ', value);
  }

  set.delete(1);
  // delete value '1'

  console.log('set.has(2)', set.has(2));
  // check if there is '1' in the set *return boolean*

  // set.get() method in no sense *error*

  console.log('set', set);
  // delete an element

  set.clear();
  console.log('set', set);
  // delete all calues

  console.log('element of set: ');
  for (const element of set) {
    console.log('element: ', element);
  }
};

// WEAKSET
// set method input has to be an object

export const weakSet = () => {
  const obj1 = { a: 1 };
  const obj2 = { b: 2 };
  const set = new WeakSet([obj1, obj2, obj2]);
  set.add(obj1);

  console.log('set', set);

  console.log('set.has({b:2}: )', set.has(obj2));

  // console.log('element of set: ');
  // for (const element of set) {
  //   console.log('element: ', element);
  // }
};
